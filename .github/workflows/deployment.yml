name: Local CI/CD for Kubernetes (Self-Hosted)

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: project-ai-ftsy-football-sum
  SERVICE_NAME: project-ai-ftsy-football-sum
  DEPLOYMENT_NAME: project-ai-ftsy-football-sum-deployment
  CONTAINER_NAME: project-ai-ftsy-football-sum-container
  KUBE_PORT: 3012
  APP_PORT: 4012
  NAMESPACE: project-ai-ftsy-football-sum

jobs:
  build-and-deploy-local:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Apply K8s Manifests
        run: kubectl apply -f deployment/
 
      - name: Build local Docker image
        run: |
          IMAGE_TAG="${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker build -t $IMAGE_TAG .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Load image into KIND cluster
        run: kind load docker-image ${{ env.IMAGE_TAG }} --name unraid-ubuntu-prod

      - name: Create/Update K8s Secrets and ConfigMaps
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_NAMESPACE: ${{ secrets.HF_NAMESPACE }}
          HF_INFERENCE_ENDPOINT_NAME: ${{ secrets.HF_INFERENCE_ENDPOINT_NAME }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          CLAUDE_MODEL: ${{ vars.CLAUDE_MODEL }}
          HF_INFERENCE_ENDPOINT_URL: ${{ secrets.HF_INFERENCE_ENDPOINT_URL }}
        run: |
          kubectl create secret generic project-ai-ftsy-football-sum-secrets \
            --from-literal=HF_TOKEN=${{ env.HF_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -n ${{ env.NAMESPACE }} -f -

          kubectl create secret generic project-ai-ftsy-football-sum-secrets \
            --from-literal=HF_NAMESPACE=${{ env.HF_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -n ${{ env.NAMESPACE }} -f -

          kubectl create secret generic project-ai-ftsy-football-sum-secrets \
            --from-literal=HF_INFERENCE_ENDPOINT_NAME=${{ env.HF_INFERENCE_ENDPOINT_NAME }} \
            --dry-run=client -o yaml | kubectl apply -n ${{ env.NAMESPACE }} -f -

          kubectl create secret generic project-ai-ftsy-football-sum-secrets \
            --from-literal=ANTHROPIC_API_KEY=${{ env.ANTHROPIC_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -n ${{ env.NAMESPACE }} -f -

          kubectl create secret generic project-ai-ftsy-football-sum-secrets \
            --from-literal=HF_INFERENCE_ENDPOINT_URL=${{ env.HF_INFERENCE_ENDPOINT_URL }} \
            --dry-run=client -o yaml | kubectl apply -n ${{ env.NAMESPACE }} -f -

          kubectl create configmap project-ai-ftsy-football-sum-config \
            --from-literal=CLAUDE_MODEL=${{ env.CLAUDE_MODEL }} \
            --dry-run=client -o yaml | kubectl apply -n ${{ env.NAMESPACE }} -f -

      - name: Deploy to Kubernetes
        run: |
          echo "Updating deployment with image: ${{ env.IMAGE_TAG }}"
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} ${{ env.CONTAINER_NAME }}=${{ env.IMAGE_TAG }}
          
          kubectl rollout restart deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }}

      - name: Restart Port-Forward Service
        run: |
          sudo systemctl restart project-ai-ftsy-football-sum-port-forward.service
          
          echo "Port-forward service has been signaled to restart."

      - name: Clean Up Unused Docker Images
        if: always()
        run: |
          echo "--- Cleaning up dangling Docker images ---"
          docker image prune -a --filter "until=24h" -f